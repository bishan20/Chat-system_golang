// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteMessageStmt, err = db.PrepareContext(ctx, deleteMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessage: %w", err)
	}
	if q.listMessagesStmt, err = db.PrepareContext(ctx, listMessages); err != nil {
		return nil, fmt.Errorf("error preparing query ListMessages: %w", err)
	}
	if q.storeMessageStmt, err = db.PrepareContext(ctx, storeMessage); err != nil {
		return nil, fmt.Errorf("error preparing query StoreMessage: %w", err)
	}
	if q.updateMessageStmt, err = db.PrepareContext(ctx, updateMessage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMessage: %w", err)
	}
	if q.updateMessageDeliveryStmt, err = db.PrepareContext(ctx, updateMessageDelivery); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMessageDelivery: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteMessageStmt != nil {
		if cerr := q.deleteMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageStmt: %w", cerr)
		}
	}
	if q.listMessagesStmt != nil {
		if cerr := q.listMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMessagesStmt: %w", cerr)
		}
	}
	if q.storeMessageStmt != nil {
		if cerr := q.storeMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing storeMessageStmt: %w", cerr)
		}
	}
	if q.updateMessageStmt != nil {
		if cerr := q.updateMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMessageStmt: %w", cerr)
		}
	}
	if q.updateMessageDeliveryStmt != nil {
		if cerr := q.updateMessageDeliveryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMessageDeliveryStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createUserStmt            *sql.Stmt
	deleteMessageStmt         *sql.Stmt
	listMessagesStmt          *sql.Stmt
	storeMessageStmt          *sql.Stmt
	updateMessageStmt         *sql.Stmt
	updateMessageDeliveryStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createUserStmt:            q.createUserStmt,
		deleteMessageStmt:         q.deleteMessageStmt,
		listMessagesStmt:          q.listMessagesStmt,
		storeMessageStmt:          q.storeMessageStmt,
		updateMessageStmt:         q.updateMessageStmt,
		updateMessageDeliveryStmt: q.updateMessageDeliveryStmt,
	}
}
